[tool.poetry]
name = "sensor-hub"
version = "0.1.0"
description = "Sensor Hub - Web application for reading sensors from Raspberry Pi 5"
authors = ["David Palmer <david.a.palmer@outlook.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "sensor_hub", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
flask = "^3.0.0"
flask-sqlalchemy = "^3.1.0"
flask-migrate = "^4.0.0"
flask-cors = "^4.0.0"
python-dotenv = "^1.0.0"
apscheduler = "^3.10.0"
click = "^8.1.0"
gunicorn = "^21.0.0"

# Raspberry Pi sensor libraries (optional for development)
# These should be installed on the Pi but are optional for development
# adafruit-circuitpython-bme280 = {version = "^2.6.0", optional = true}
# adafruit-circuitpython-dht = {version = "^3.7.0", optional = true}
# board = {version = "^1.0", optional = true}
# busio = {version = "^5.4.0", optional = true}
# digitalio = {version = "^3.3.0", optional = true}
smbus2 = "^0.5.0"
adafruit-circuitpython-bme280 = "^2.6.29"
lgpio = "^0.2.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-flask = "^1.3.0"
black = "^23.0.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
isort = "^5.12.0"
pre-commit = "^3.4.0"

[tool.poetry.scripts]
sensor-hub = "sensor_hub.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["sensor_hub"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]
